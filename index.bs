<pre class="metadata">
Title: Loader
Group: TC39
H1: Loader
Shortname: loader
Level: 1
Status: DREAM
ED: https://dherman.github.io/loader
Editor: Eric Ferraiuolo, Yahoo https://yahoo.com, edf@ericf.me, https://github.com/ericf
Editor: Dave Herman, Mozilla https://mozilla.org, dherman@mozilla.com, http://calculist.org
Editor: Yehuda Katz, jQuery Foundation https://jquery.org, wycats@gmail.com, http://yehudakatz.com
Editor: Caridy Pati√±o, Yahoo https://yahoo.com, caridy@gmail.com, http://caridy.name
Abstract: This specification describes the behavior of loading JavaScript modules from a
Abstract: JavaScript host environment. It also provides APIs for intercepting the module
Abstract: loading process and customizing loading behavior.
Logo: https://resources.whatwg.org/logo-javascript.svg
!Version History: <a href="https://github.com/dherman/loader/commits">https://github.com/dherman/loader/commits</a>
!Participate: <a href="https://github.com/dherman/loader/issues/new">File an issue</a> (<a href="https://github.com/dherman/loader/issues?state=open">open issues</a>)
</pre>

<style>
  ol > li { margin: 0; }
</style>

<h2 id="status" class="no-num no-toc">Status</h2>

This document is a work in progress and dreams of becoming a living standard.

<h2 id="intro">Introduction</h2>

Throughout their development, JavaScript modules have been divided into two general areas:

<ul>
<li>The <b>authoring format</b>, which defines the importing and exporting syntax, as well as the semantics for variable bindings and cycles.
<li>The <b>JavaScript Loader</b>, which provides a pipeline for on-demand, asynchronous loading of JavaScript modules.
</ul>

The authoring format was carefully designed to support pre-compilation (like Browserify) and on-demand asynchronous loading (like AMD). It defines the minimal syntax necessary to allow people to write portable modules that can work across different platforms, most notably Node.js and web browsers.

The JavaScript Loader allows host environments, like Node.js and browsers, to fetch and load modules on demand. It provides a hookable pipeline, to allow front-end packaging solutions like Browserify, WebPack and jspm to hook into the loading process.

This division provides a single format that developers can use in all JavaScript environments, and a separate loading mechanism for each environment. For example, a Node Loader would load its modules from the file system, consulting <code>package.json</code>, while a Browser Loader would fetch modules and use browser-supplied packaging formats.

JavaScript itself, in ECMAScript 2015, defines the module syntax and the "linking semantics" between modules. When a module is requested, it delegates responsibility for loading the module to the host environment. The Loader defines how host environments can allow JavaScript code to configure that process.

The primary goal is to make as much of this process as possible consistent between Node and Browser environments. For example, if a JavaScript program wants to translate <code>.coffee</code> files to JavaScript on the fly, the Loader defines a "translate" hook that can be used. This allows programs to participate in the loading process, even though some details (specifically, the process of getting a particular module from its host-defined storage) will be different between environments.

<h2 id="pipeline">Loader Pipeline</h2>

<b>TODO:</b> migrate from existing documents (<a href="https://github.com/jorendorff/js-loaders/wiki/Spec-Drafts">modules draft</a>, <a href="http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts#current_working_draft">ES6 drafts</a>)

<h3 id="pipeline-semantics">Semantics</h3>

<b>TODO:</b> migrate from <a href="http://people.mozilla.org/~jorendorff/es6-draft.html#sec-runtime-semantics-loader-state">15.2.3</a> and <a href="http://people.mozilla.org/~jorendorff/es6-draft.html#sec-runtime-semantics-module-loading">15.2.4</a>


<h3 id="pipeline-api">API</h3>

<b>TODO:</b> migrate from <a href="http://people.mozilla.org/~jorendorff/es6-draft.html#sec-loader-objects">26.2</a> and <a href="http://people.mozilla.org/~jorendorff/es6-draft.html#sec-system-object">26.3</a>

<ul>
  <li>methods:
    <ul>
    <li><code>System.import(name, context).then(mod => ...)</code>
    <li><code>System.load(name, context).then(() => ...)</code>
    <li><code>System.provide(name, src)</code>
    </ul>
  <li>hooks:
    <ul>
    <li><code>System.hook("normalize"[, normalize])</code>
    <li><code>System.hook("locate"[, locate])</code>
    <li><code>System.hook("fetch"[, fetch])</code>
    <li><code>System.hook("translate"[, translate])</code>
    <li><code>System.hook("instantiate"[, instantiate])</code>
    </ul>
  <li>module registry:
    <ul>
    <li><code>System.modules.get("https://jquery.com/modules/v/2.1.1")</code>
    <li><code>System.modules.set("https://jquery.com/modules/v/2.1.1", mod)</code>
    <li><code>System.modules.delete("https://jquery.com/modules/v/2.1.1")</code>
    <li><code>System.modules.has("https://jquery.com/modules/v/2.1.1")</code>
    </ul>
</ul>

<h2 id="local">Local Loading</h2>

<b>TODO:</b>

<ul>
<li>syntax for accessing module local information: <code>import local from this;</code>
<li>dynamic import: <code>local.import()</code>
<li>extending the hooks to handle <code>this</code>
<li>debugging info
<li>room for host environment-specific data
</ul>


<h2 id="browser">Browser Loader</h2>

<h3 id="browser-site-packages">Site Packages</h3>

The browser loader contains extra properties for storing <dfn>site packages</dfn>, an application-global set of globally available packages. These map in an internal table to unique URLs that in turn serve as keys in the module registry.

<div class="note">
<p>
The site package system serves as a simple coordination mechanism for modest-sized applications, but it does not provide all functionality required of a full-fledged package management system. It is expected that development ecosystems will build around package management tools that deal with requirements outside the scope of this specification, such as version management and allowing multiple versions of a library to coexist with the same name.
</p>

<p>
Tools that preprocess JavaScript source code may choose to use or ignore the site package table. For example, a package manager may choose to preprocess two separate import statements requiring <code>"jquery"</code> to <code>"jquery/1.9"</code> and <code>"jquery/2.1.1"</code> respectively, based on configuration files informing the tool of version requirements. The tool would then store both versions of jQuery in the site package table using the longer names. Alternatively, the tool may choose to preprocess the imports directly as URLs and bypass the site package system altogether.
</p>
</div>

The browser loader has an extra internal slot:

<table>
  <thead>
    <tr>
      <th>Internal Slot</th>
      <th>Description (<em>non-normative</em>)</th>
    </tr>
  </thead>
  <tr>
    <td>\[[Site]]</td>
    <td>A table that maps package names to URLs.</td>
  </tr>
</table>

<h4 id="System-site">System.site( mappings )</h4>

<div class="example">
  <pre>
    System.site({
      "jquery":     "https://cdn.example.com/jquery/v/2.1.1",
      "underscore": "https://cdn.example.com/underscore/v/1.7.0",
      "moment":     "https://cdn.example.com/moment/v/2.8.3"
    });
  </pre>
</div>

<h4 id="System-site-get">System.site.get( name )</h4>

<div class="example">
  <pre>
    var url = System.site.get("jquery");
  </pre>
</div>

<h4 id="System-site-set">System.site.set( name, url )</h4>

<div class="example">
  <pre>
    System.site.set("jquery", "https://cdn.example.com/jquery/v/2.1.1");
  </pre>
</div>

<h4 id="System-site-has">System.site.has( name )</h4>

<div class="example">
  <pre>
    if (!System.site.has("jquery")) {
      System.site.set("jquery", "https://cdn.example.com/jquery/v/2.1.1");
    }
  </pre>
</div>

<h4 id="System-site-delete">System.site.delete( name )</h4>

<div class="example">
  <pre>
    System.site.delete("jquery");
  </pre>
</div>

<h3 id="browser-normalize">Normalize</h3>

<b>TODO:</b> name resolution policy
<ul>
  <li>relative and site-relative URLs: <code>"./utils.js"</code>, <code>"/scripts/utils.js"</code>
  <li>JS standard modules: <code>"std/math"</code>, <code>"std/reflect"</code>
  <li>Web standard modules: <code>"web/worker"</code>, <code>"web/audio"</code>
  <li>absolute URLs: <code>"https://jquery.com/modules/v/2.0"</code>
  <li>top-level packages consult \[[Site]]: <code>"jquery"</code>, <code>"ember/data"</code>
</ul>

<h3 id="browser-locate">Locate</h3>

<b>TODO:</b> no-op.

<h3 id="browser-fetch">Fetch</h3>

<b>TODO:</b>
<ul>
  <li>reference fetch standard
  <li>cross-origin produces an opaque object as in ServiceWorker
  <li>CORS, CSP
  <li>other kinds of web assets
</ul>

<h3 id="browser-translate">Translate</h3>

<b>TODO:</b> no-op.

<h3 id="browser-instantiate">Instantiate</h3>

<b>TODO:</b>
<ul>
  <li>basically a no-op.
  <li>but also needs to re-absorb opaque responses.
</ul>
